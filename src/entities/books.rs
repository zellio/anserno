//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::{entity::prelude::*, QueryOrder};
use serde::Serialize;

use crate::{
    error::AnsernoResult,
    hypertext_application_language::{Link, LinkBuilder, Resource, ResourceBuilder},
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize)]
#[sea_orm(table_name = "books")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub title: String,
    pub sort: Option<String>,
    pub timestamp: Option<DateTimeUtc>,
    pub pubdate: Option<DateTimeUtc>,
    #[sea_orm(column_type = "Double")]
    pub series_index: f64,
    pub author_sort: Option<String>,
    pub isbn: Option<String>,
    pub lccn: Option<String>,
    pub path: String,
    pub flags: i32,
    pub uuid: Option<String>,
    #[sea_orm(column_type = "Binary(BlobSize::Blob(None))", nullable)]
    pub has_cover: Option<bool>,
    pub last_modified: DateTimeUtc,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::books_authors_link::Entity")]
    BooksAuthorsLink,

    #[sea_orm(has_many = "super::books_series_link::Entity")]
    BooksSeriesLink,

    #[sea_orm(has_many = "super::comments::Entity")]
    Comments,

    #[sea_orm(has_many = "super::data::Entity")]
    Formats,

    #[sea_orm(has_one = "super::search_index::Entity")]
    SearchIndex,
}

impl Related<super::books_authors_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksAuthorsLink.def()
    }
}

impl Related<super::authors::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_authors_link::Relation::Author.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::books_authors_link::Relation::Book.def().rev())
    }
}

impl Related<super::books_series_link::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::BooksSeriesLink.def()
    }
}

impl Related<super::series::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_series_link::Relation::Series.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::books_series_link::Relation::Book.def().rev())
    }
}

impl Related<super::comments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Comments.def()
    }
}

impl Related<super::data::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Formats.def()
    }
}

impl Related<super::search_index::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SearchIndex.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[async_trait::async_trait]
impl crate::hypertext_application_language::Model for Model {
    fn resource_name(&self) -> &str {
        "books"
    }

    fn as_link(&self) -> AnsernoResult<Link> {
        LinkBuilder::default()
            .title(&self.title)
            .href(&self.self_href(self.id))
            .build()
    }

    async fn as_resource(&self, conn: &DatabaseConnection) -> AnsernoResult<Resource> {
        let mut builder = ResourceBuilder::from_model::<Entity>(self);

        if self.has_cover.unwrap_or(false) {
            builder
                .link((
                    "cover".to_string(),
                    vec![LinkBuilder::default()
                        .href(format!("{}/cover", self.self_href(self.id)))
                        .build()?],
                ))
                .link((
                    "thumbnail".to_string(),
                    vec![LinkBuilder::default()
                        .href(format!("{}/thumb", self.self_href(self.id)))
                        .build()?],
                ));
        }

        if let Ok(formats) = self
            .find_related(super::data::Entity)
            .order_by_asc(super::data::Column::Format)
            .all(conn)
            .await
        {
            builder.link((
                "downloads".to_string(),
                formats
                    .iter()
                    .map(|format| {
                        LinkBuilder::default()
                            .href(format!(
                                "{}/download/{}",
                                self.self_href(self.id),
                                format.format.to_lowercase()
                            ))
                            .name(format.format.clone())
                            .build()
                    })
                    .collect::<Result<Vec<_>, _>>()?,
            ));
        }

        if let Ok(authors) = self
            .find_related(super::authors::Entity)
            .order_by_asc(super::authors::Column::Id)
            .all(conn)
            .await
        {
            builder.link((
                "authors".to_string(),
                authors
                    .iter()
                    .map(|author| author.as_link())
                    .collect::<Result<Vec<_>, _>>()?,
            ));
        }

        if let Ok(series) = self
            .find_related(super::series::Entity)
            .order_by_asc(super::series::Column::Id)
            .all(conn)
            .await
        {
            builder.link((
                "series".to_string(),
                series
                    .iter()
                    .map(|series| series.as_link())
                    .collect::<Result<Vec<_>, _>>()?,
            ));
        }

        builder.build()
    }
}
