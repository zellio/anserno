//! `SeaORM` Entity. Generated by sea-orm-codegen 0.12.10

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "anserno_search_index")]
pub struct Model {
    #[sea_orm(primary_key, column_name = "rowid")]
    pub book_id: i32,

    #[sea_orm(nullable)]
    pub sort: Option<String>,

    #[sea_orm(nullable)]
    pub title: Option<String>,

    #[sea_orm(nullable)]
    pub authors: Option<String>,

    #[sea_orm(nullable)]
    pub series: Option<String>,

    #[sea_orm(nullable)]
    pub formats: Option<String>,

    #[sea_orm(nullable)]
    pub description: Option<String>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::books::Entity",
        from = "Column::BookId",
        to = "super::books::Column::Id"
    )]
    Book,

    #[sea_orm(
        belongs_to = "super::flat_books::Entity",
        from = "Column::BookId",
        to = "super::flat_books::Column::Id"
    )]
    FlatBook,
}

impl Related<super::books::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Book.def()
    }
}

impl Related<super::flat_books::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::FlatBook.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
