//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.3

use sea_orm::{entity::prelude::*, QueryOrder};
use serde::{Deserialize, Serialize};

#[cfg(feature = "hal")]
use hypertext_application_language::{
    ext::sea_orm::AsResource,
    link::{AsLink, Link},
    resource::Resource,
};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "series")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub id: i32,
    #[sea_orm(column_type = "Text", unique)]
    pub name: String,
    #[sea_orm(column_type = "Text", nullable)]
    pub sort: Option<String>,
    #[sea_orm(column_type = "Text")]
    pub link: String,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl Related<super::books::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_series_link::Relation::Book.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::books_series_link::Relation::Series.def().rev())
    }
}

impl Related<super::flat_books::Entity> for Entity {
    fn to() -> RelationDef {
        super::books_series_link::Relation::FlatBook.def()
    }

    fn via() -> Option<RelationDef> {
        Some(super::books_series_link::Relation::Series.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[cfg(feature = "hal")]
impl AsLink for Model {
    fn as_link(&self) -> Link {
        self.self_link().with_title(&self.name)
    }
}

#[cfg(feature = "hal")]
impl AsResource for Model {
    fn resource_kind(&self) -> &str {
        Entity.table_name()
    }

    fn resource_identifier(&self) -> impl ::std::fmt::Display {
        self.id.to_string()
    }

    async fn as_resource(
        &self,
        conn: &sea_orm::DatabaseConnection,
    ) -> hypertext_application_language::error::Result<Resource> {
        Ok(Resource::from_model::<Entity>(self)?.with_links(
            "books",
            self.find_related(super::books::Entity)
                .order_by_asc(super::books::Column::SeriesIndex)
                .all(conn)
                .await?
                .iter()
                .map(|book| {
                    book.as_link()
                        .with_name(&book.title)
                        .with_title(format!("{} [{}]", self.name, book.series_index))
                }),
        ))
    }
}
